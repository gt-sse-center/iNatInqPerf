from abc import ABC, abstractmethod
import numpy as np
from typing import Dict, Any, Tuple, Sequence

class VectorBackend(ABC):
    name: str

    @abstractmethod
    def init(self, dim: int, metric: str, **params) -> None: ...
    def train(self, X_train: np.ndarray) -> None: ...
    @abstractmethod
    def upsert(self, ids: np.ndarray, X: np.ndarray) -> None: ...
    @abstractmethod
    def search(self, Q: np.ndarray, topk: int, **kwargs) -> Tuple[np.ndarray, np.ndarray]: ...
    @abstractmethod
    def stats(self) -> Dict[str, Any]: ...
    @abstractmethod
    def drop(self) -> None: ...
    @abstractmethod
    def delete(self, ids: Sequence[int]) -> None: ...